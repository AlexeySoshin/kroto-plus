package com.github.marcoferrer.krotoplus.generators

import com.github.marcoferrer.krotoplus.schema.Schema
import com.google.protobuf.compiler.PluginProtos
import com.squareup.kotlinpoet.FileSpec

interface Generator : (PluginProtos.CodeGeneratorResponse.Builder) -> Unit {

    val key: String

    val context: Context

    val isEnabled: Boolean
        get() = context.args.run {
            flags.any { it == key || it.startsWith("$key|") } ||
            options.keys.any { it.startsWith("$key|") }
        }

    fun hasFlag(flag: String): Boolean = "$key|$flag" in context.args.flags

    fun getOption(option: String): String? = context.args.options["$key|$option"]

    fun FileSpec.toResponseFileProto() =
            PluginProtos.CodeGeneratorResponse.File.newBuilder()
                    .apply {
                        val basePath = packageName.replace(".","/")
                        val fileName = "${this@toResponseFileProto.name}.kt"

                        val subDirOverride = getOption("outputSubDir")
                                ?.let { "../$it/" }.orEmpty()

                        name = subDirOverride + if(basePath.isNotEmpty())
                            "$basePath/$fileName" else fileName

                        content = this@toResponseFileProto.toString()
                    }
                    .build()

    data class Context(val request: PluginProtos.CodeGeneratorRequest){

        val schema = Schema(request)

        val args = request.parseArgs()
    }

    companion object {
        const val AutoGenerationDisclaimer =
                "THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY."
    }
}