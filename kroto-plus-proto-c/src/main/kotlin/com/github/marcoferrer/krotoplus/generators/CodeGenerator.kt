package com.github.marcoferrer.krotoplus.generators

import com.github.marcoferrer.krotoplus.schema.Schema
import com.google.protobuf.compiler.PluginProtos
import com.squareup.kotlinpoet.FileSpec

fun FileSpec.toResponseFileProto(): PluginProtos.CodeGeneratorResponse.File {
    val basePath = this.packageName.replace(".","/")

    return PluginProtos.CodeGeneratorResponse.File.newBuilder()
            .setName("$basePath/${this.name}.kt")
            .setContent(this.toString())
            .build()
}

interface Generator : (PluginProtos.CodeGeneratorResponse.Builder) -> Unit {

    val key: String

    val context: Context

    val isEnabled: Boolean
        get() = context.args.run {
            flags.any { it == key || it.startsWith("$key|") } ||
            options.keys.any { it.startsWith("$key|") }
        }

    fun hasFlag(flag: String): Boolean = "$key|$flag" in context.args.flags

    fun getOption(option: String): String? = context.args.options["$key|$option"]

    data class Context(val request: PluginProtos.CodeGeneratorRequest){

        val schema = Schema(request)

        val args = request.parseArgs()
    }

    companion object {
        const val AutoGenerationDisclaimer = "THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY."
    }
}