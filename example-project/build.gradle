plugins{
    id 'idea'
    id 'com.google.protobuf' version '0.8.6'
    id "org.jetbrains.kotlin.jvm" version "1.2.60"
}

def versions = [
        "protoc":     '3.5.1',
        "protobuf":   '3.5.1',
        "grpc":       '1.10.0',
        "kotlin":     '1.2.60',
        "coroutines": '0.24.0',
        "krotoplus":  '0.1.3-SNAPSHOT'
]

group = 'com.github.marcoferrer.krotoplus'
version = versions.krotoplus

kotlin {
    experimental { coroutines 'enable' }
}

compileKotlin {
    kotlinOptions{
        jvmTarget = "1.8"
        freeCompilerArgs += ["-Xjvm-default=compatibility","-Xmulti-platform"]
    }
}

compileTestKotlin {
    kotlinOptions{
        jvmTarget = "1.8"
        freeCompilerArgs += [
                "-Xjvm-default=compatibility",
                "-Xmulti-platform"
        ]
    }
}

repositories {
    jcenter()
    if(versions.krotoplus.endsWith("SNAPSHOT")) {
        flatDir dirs: "../kroto-plus-message/build/libs/"
        flatDir dirs: "../kroto-plus-coroutines/build/libs/"
        flatDir dirs: "../kroto-plus-test/build/libs/"
        flatDir dirs: "../kroto-plus-protoc/build/libs/"
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"
    implementation "com.google.protobuf:protobuf-java:${versions.protobuf}"
    implementation "com.github.marcoferrer.krotoplus:kroto-plus-coroutines:${versions.krotoplus}"
    implementation "com.github.marcoferrer.krotoplus:kroto-plus-test:${versions.krotoplus}"
    implementation "com.github.marcoferrer.krotoplus:kroto-plus-message:${versions.krotoplus}"

    implementation "io.grpc:grpc-protobuf:${versions.grpc}",
                   "io.grpc:grpc-stub:${versions.grpc}"

    testImplementation "io.grpc:grpc-testing:${versions.grpc}"

    testImplementation group: 'junit', name: 'junit', version: '[4,)'
    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit"
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/kotlin/main")
        testOutputDir = file("$buildDir/classes/kotlin/test")
    }
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${versions.protoc}"}

    generatedFilesBaseDir = "$buildDir/generated-sources"

    //noinspection GroovyAssignabilityCheck
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${versions.grpc}" }
        kroto {
            artifact = "com.github.marcoferrer.krotoplus:kroto-plus-protoc:${versions.krotoplus}:jvm8@jar"
        }
    }

    generateProtoTasks {
        def krotoConfig = file("krotoPlusConfig.json")

        all().each{ task ->
            // Adding the config file to the task inputs enabled UP-TO-DATE checks
            // to include changes to configuration
            task.inputs.files krotoConfig

            task.plugins {
                grpc { outputSubDir = "java" }
                kroto {
                    // The extendable-messages generator needs the outputSubDir
                    // to be the same as 'task.builtins.java.outputSubDir' since
                    // it relies on the insertion_point api from protoc.
                    outputSubDir = "java"
                    option "ConfigPath=$krotoConfig"
                }
            }
        }
    }
}
